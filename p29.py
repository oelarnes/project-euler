# Consider all integer combinations of ab for 2 <= a <= 5 and 2 <= b <= 5:
# 
# 2^2=4, 2^3=8, 2^4=16, 2^5=32
# 3^2=9, 3^3=27, 3^4=81, 3^5=243
# 4^2=16, 4^3=64, 4^4=256, 4^5=1024
# 5^2=25, 5^3=125, 5^4=625, 5^5=3125
# If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:
# 
# 4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
# 
# How many distinct terms are in the sequence generated by ab for 2 <= a <= 100 and 2 <= b <= 100?

# Solution: We are looking for distinct multisets of primes that can be generated in such a fashion. The easiest thing to do will be to generate all such multisets and call set. We factor each 2 <= a <= b and create multisets of factors.

from pe_functions import factor
from pe_functions import get_primes

primes = get_primes(100)
powers = []

for a in range(2,101):
	p_fact = factor(a)
	s = {p:0 for p in primes}
	for el in p_fact:
		s[el] += 1
	for b in range(2,101):
		dict = { p: b * s[p] for p in s }
		powers.append(tuple(dict.values()))
		
set_powers = set(powers)

print len(set_powers)

# 9183