# Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
# By starting with 1 and 2, the first 10 terms will be:
# 
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# 
# By considering the terms in the Fibonacci sequence whose values do not exceed four 
# million, find the sum of the even-valued terms.

# Solution:
# The Fibonacci sequence satisfies the recursive formula F_n = F_{n-1} + F_{n-2}.
# Mod 2, the sequence reduces to 1, 0, 1, 1, 0, 1, 1, 0, ..., with an even term
# every three places. Thus we need to find F_{3n - 1} for n >= 1.

# We can expand the recursion to write only in terms we are interested in:
# F_{n} = F_{n + 1} - F_{n-1}
# F_{n} = F_{n + 2} - F_n - F_{n} + F{n - 2}
# 3F_{n} = F_{n + 3} - F_{n + 1} + F_{n - 1} - F_{n - 3}
# 3F_{n} = F_{n + 3} - F_n - F_{n - 3}
# F_n = 4F_{n - 3} + F_{n - 6} for n >= 6

# check: 34 = 4 * 8 + 2

fibs = [2]
fib = 8
while fib <= 4*10**6:
	fibs.append(fib)
	fib = 4*fibs[-1] + fibs[-2]
	
print sum(fibs) 

#4613732